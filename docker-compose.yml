version: '3.9'

services:
  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nucleus-api
    ports:
      - "8080:8080"
    environment:
      - ENV=development
      - CONFIG_PATH=/app/configs
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-nucleus}
      - DB_PASSWORD=${DB_PASSWORD:-nucleus123}
      - DB_NAME=${DB_NAME:-nucleus_db}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis123}
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      kafka:
        condition: service_started
    # keycloak:
    #   condition: service_healthy
    networks:
      - nucleus-network
    volumes:
      - ./configs:/app/configs:ro
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: nucleus-postgres
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: ${DB_USER:-nucleus}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-nucleus123}
      POSTGRES_DB: ${DB_NAME:-nucleus_db}
      POSTGRES_MULTIPLE_DATABASES: keycloak_db
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - nucleus-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-nucleus}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: nucleus-redis
    ports:
      - "6380:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis-data:/data
    networks:
      - nucleus-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: nucleus-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-nucleus}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-rabbitmq123}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - nucleus-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka + Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: nucleus-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - nucleus-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: nucleus-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - nucleus-network

  # Keycloak Identity Provider
  keycloak-db:
    image: postgres:16-alpine
    container_name: nucleus-keycloak-db
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak123
    volumes:
      - keycloak-db-data:/var/lib/postgresql/data
    networks:
      - nucleus-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: nucleus-keycloak
    ports:
      - "8180:8080"
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin123
      KC_DB: postgres
      KC_DB_URL_HOST: keycloak-db
      KC_DB_URL_PORT: 5432
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak123
      KC_HEALTH_ENABLED: "true"
      KC_HTTP_ENABLED: "true"
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KC_LOG_LEVEL: INFO
    command: 
      - start-dev
      - --http-port=8080
    depends_on:
      keycloak-db:
        condition: service_healthy
    networks:
      - nucleus-network
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/localhost/8080 && echo -e 'GET /health/ready HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: close\\r\\n\\r\\n' >&3 && cat <&3 | grep -q '200 OK'"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 90s

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: nucleus-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - nucleus-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: nucleus-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - nucleus-network

  # Loki for logging
  loki:
    image: grafana/loki:latest
    container_name: nucleus-loki
    ports:
      - "3101:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - nucleus-network

volumes:
  postgres-data:
  keycloak-db-data:
  redis-data:
  rabbitmq-data:
  prometheus-data:
  grafana-data:

networks:
  nucleus-network:
    driver: bridge